1.什麼是heap ? 什麼是stack ？
stock 存放靜態記憶體的位址
  - 存放類型已知,可預測性,有規律的值,一般變數、參數、固定的位址
  - 後進先出的生存模式,當程式結束的時候,系統會根據順序自動退回釋放
  ex: int i, function($string)
heap 存放動態記憶體的位址
  - 存放較無規律及未知的資料、不可預測其存活時間的資料
  - 當程式中透過new出來的object的值就會存在放heap
  - 需使用者或程式自行回收空間
  - 常常有跑越久記憶體用越多的怪現象,有很大一部分可能是程式沒有回收heap造成的
  ex: $david = new david();

2.queue 的儲存方式屬於heap 還是stack?
  queue儲存方式屬於heap,queue最底層是一個動態陣列,陣列的大小要在執行的時候由使用者或程式的輸入來決定，就只能使用動態配置，也就是把這個陣列配置在heap中

3.說明heap 和stack 記憶體的回收機制
  stack - 當使用方法結束時,系統會根據後進先出的規則,將記憶體退回抹除
      int main( int argc, char *argv[], char *envp[] )
      {  
      int i = 1;  
      foo(i, argc);
      cout << "Hello World !" << "\n";  
      }  
     進入 main() → 儲存 main 區域變數與呼叫參數 → 配置foo 回傳結果位址 → 呼叫  foo() → 
     儲存 foo 區域變數與呼叫參數 → 結束 foo() → 回存 foo 回傳結果→ 接續執行 main() → 結束 main()
  heap - 需要使用者或程式將開闢出來的記憶體資源做回收的動作